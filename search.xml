<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/cipher/Untitled-1.html"/>
      <url>/cipher/Untitled-1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>选择框示例</title>    <style>       #contentArea, #mySelect {    display: inline-block;    float: left;    margin-top: 10px; /* 添加一些上边距 */  }      h2{display: flex;        float: left;}        select, button {            float: left;            color: rgb(34, 34, 34);            background: linear-gradient(142.99deg, rgba(217, 217, 217, 0.63) 15.53%, rgba(243, 243, 243, 0.63) 88.19%);            box-shadow: 0px 12px 24px -1px rgba(0, 0, 0,0.18);            border-color: rgba(7, 4, 14, 0);            border-radius: 50px;            height: 44px;            margin-bottom: .7rem;            outline: none;            text-align: center;            width: 100%;            max-width: 200px;            transition: 0.5s;            text-align: center;            font-size: 16px; /* 设置字体大小 */            font-family: Arial, sans-serif; /* 设置字体家族 */        }        select:hover, button:hover {            background-color: #348016; /* 鼠标悬停时改变背景颜色 */        }        select:focus, button:focus {            outline: none; /* 移除默认的焦点轮廓 */            box-shadow: 0 0 10px #00a0f0; /* 获得焦点时添加阴影效果 */        }    </style></head><body>    <select id="mySelect" onchange="displayContent()">        <option value="option1">古典密码</option>        <option value="option2">现代密码</option>    </select>  <h2>-->></h2>    <div id="contentArea" style="display: none;">        <!-- 这里放置显示的内容 -->    </div>    <div style="clear: both;"></div>    <div id="keysContainer" style="display: none;"></div>    <script>        function displayContent() {            const select = document.getElementById('mySelect');            const selectedOption = select.options[select.selectedIndex].value;            const contentArea = document.getElementById('contentArea');            const keysContainer = document.getElementById('keysContainer');            // 清空之前的密钥输入框            keysContainer.innerHTML = '';            keysContainer.style.display = 'none';            switch (selectedOption) {                case 'option1':                    // 古典密码的内容                    contentArea.innerHTML = `                        <select id="algorithm">                            <option value="DES">DES</option>                            <option value="AES">AES</option>                            <option value="RSA">RSA</option>                            <option value="SM4">SM4</option>                        </select>                    `;                    contentArea.style.display = 'block';                    break;                case 'option2':                    // 现代密码的内容                    contentArea.innerHTML = `                        <select id="algorithm" >                            <option value="加法密码">加法密码</option>                            <option value="单表代替">单表代替</option>                            <option value="仿射密码">仿射密码</option>                            <option value="PlayFair">PlayFair</option>                            <option value="Vigenere">Vigenere</option>                            <option value="Hill">Hill</option>                        </select>                    `;                    contentArea.style.display = 'block';                    break;            }            // 获取算法选择器            const algorithmSelect = document.getElementById('algorithm');            // 监听算法选择变化            algorithmSelect.addEventListener('change', function() {                const selectedAlgorithm = algorithmSelect.value;                if (selectedAlgorithm === 'RSA') {                    // 如果选择的是RSA，添加两个密钥输入框                    keysContainer.innerHTML = `                        <label for="publicKey">公钥：</label>                        <input type="text" id="publicKey" placeholder="输入公钥" autocomplete="off">                        <label for="privateKey">私钥：</label>                        <input type="text" id="privateKey" placeholder="输入私钥" autocomplete="off">                    `;                    keysContainer.style.display = 'block';                }            } );        }    </script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cipher/berifen.html"/>
      <url>/cipher/berifen.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>密码学</title>    <style>body, html {            /* height: 100%; */            margin: 0;            display: flex;            margin: 0 auto;        }.main {            width: 100%;            max-width: 600px; /* 限制最大宽度 */             padding: 20px;            box-sizing: border-box;            margin-left: 180px;}h1 {                margin-left: 150px;/* 水平居中h1文字 */            color: #3e7ca5; /* 设置h1文字的颜色 */            font-family: cursive, sans-serif;        }h1:hover{    color: #05060f;}.input {      width: 100%;  margin-bottom: .5rem;   max-width: 400px;  height: 44px;  background-color: #05060f0a;  border-radius: .5rem;  padding: 0 1rem;  border: 2px solid transparent;  font-size: 1rem;  transition: border-color .3s cubic-bezier(.25,.01,.25,1) 0s, color .3s cubic-bezier(.25,.01,.25,1) 0s,background .2s cubic-bezier(.25,.01,.25,1) 0s;}.label {  display: block;  margin-bottom: .3rem;  font-size: 1.2rem;  font-weight: bold;  color: #05060f99;  transition: color .3s cubic-bezier(.25,.01,.25,1) 0s;}.label:hover{    color: #6eeb0e99;}.input:hover, .input:focus, .input-group:hover .input {  outline: none;  display: flex;  align-items: center;  margin-bottom: 1rem;  border-color: #05060f;}select{margin-bottom: 10px;        margin-top: 10px;        max-width: 400px;        width: 100%;        height: 44px;                outline: 0;        background: #bde9cf;        color: #5f84ce;        border: 1px solid crimson;        border-radius: 9px;                padding: 4px;                font-size: 16px;        font-family: cursive, sans-serif;        font-weight:bolder;        text-align: center;        transition: 0.5s;    } button {  display: block;  color: rgb(34, 34, 34);  background: linear-gradient(142.99deg, rgba(217, 217, 217, 0.63) 15.53%, rgba(243, 243, 243, 0.63) 88.19%);  box-shadow: 0px 12px 24px -1px rgba(0, 0, 0,0.18);  border-color: rgba(7, 4, 14, 0);  border-radius: 50px;  /* block-size: 40px; */  height: 44px;  margin-bottom: .7rem;  /* margin: 7px auto;  */   /* padding: 18px 15px; */   outline: none;  text-align: center;  font-family: cursive, sans-serif;  width: 100%;  max-width: 400px;  transition: 0.5s;  text-align: center;  font-size: 16px; /* 设置字体大小 */          } select:hover,button:hover {  background-color: #b1f197; /* 鼠标悬停时改变背景颜色 */} button:focus {  outline: none; /* 移除默认的焦点轮廓 */  box-shadow: 0 0 10px #00a0f0; /* 获得焦点时添加阴影效果 */}        /* button {            background-color: #a1c5ec;            color: rgb(229, 139, 139);            border: none;            cursor: pointer;        } */        .result {            margin-top: 20px;            font-weight: bold;            font-size: 1.2rem;            font-weight: bold;            color: #05060f99;                    }.video {      position: fixed;      top: 0;      left: 0;      width: 100%;      height: 100%;      z-index: -1000;      object-fit: cover;         }    </style></head><body>    <div class="main">    <h1>密码学</h1>    <video class="video" src="man.mp4" loop="loop" controls="controls" autoplay="autoplay" muted></video>        <label class="label" for="algorithm">选择加解密算法：</label>    <select id="algorithm">                    <option value="select">Select a algorithm</option>        <optgroup label="古典密码" id="classicalCiphers">            <option value="加法密码">加法密码</option>            <option value="单表代替">单表代替</option>            <option value="仿射密码">仿射密码</option>            <option value="PlayFair">PlayFair</option>            <option value="Vigenere">Vigenere</option>            <option value="Hill">Hill</option>        </optgroup>        <optgroup label="现代密码" id="modernCiphers">        <option value="DES">DES</option>        <option value="AES">AES</option>        <option value="RSA">RSA</option>        <option value="SM4">SM4</option>        <option value="RC4">RC4</option>    </optgroup>        <!-- 可扩展其他算法 -->    </select>    <div class="input-group">        <label class="label" for="inputData">输入数据：</label>        <input placeholder="输入需要加解密的数据" autocomplete="off" id="inputData" class="input" name="text" type="text">            </div>    <div class="input-group">        <label class="label" for="inputKey">输入密钥：</label>        <input placeholder="输入密钥" autocomplete="off" id="inputKey" class="input" name="text" type="text"></div>    <!-- <label for="inputData">输入数据：</label>    <!-- <input id="inputData" type="text" placeholder="在此输入需要加解密的数据"> -->    <!-- <input placeholder="输入需要加解密的数据" class="input" name="text" type="text"> --><!--     <label for="inputKey">输入密钥：</label>    <input id="inputKey" type="text" placeholder="在此输入密钥"> -->    <!-- <input placeholder="输入密钥" class="input" name="text" type="text">    -->    <button onclick="encryptData()">加密</button>    <button onclick="decryptData()">解密</button>     <div class="result">        <p>结果：</p>        <p id="output"></p>    </div>    <script>//        const backendUrl = "https://flask-backend-cwc0.onrender.com/"; // 线上服务的 URL 地址）        const backendUrl = "http://127.0.0.1:5000"; // 后端服务的 URL（本地开发地址）                           async function encryptData() {            const algorithm = document.getElementById("algorithm").value; // 获取算法选择            const data = document.getElementById("inputData").value; // 获取用户输入的数据            const key = document.getElementById("inputKey").value; // 获取用户输入的密钥            try {                // 向后端发送 POST 请求                const response = await fetch(`${backendUrl}/encrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" }, // 请求头，表示数据类型为 JSON                    body: JSON.stringify({ algorithm, data, key }), // 请求体，发送的数据                });                const result = await response.json(); // 接收后端返回的响应                if (response.ok) {                    // 将加密结果显示在页面上                    document.getElementById("output").innerText = `加密结果：${result.result}`;                } else {                    document.getElementById("output").innerText = `错误：${result.error}  提示：${result.result}`;                }            } catch (error) {                document.getElementById("output").innerText = "请求失败，请检查网络！";            }        }                async function decryptData() {            const algorithm = document.getElementById("algorithm").value;            const data = document.getElementById("inputData").value;            const key = document.getElementById("inputKey").value;            try {                const response = await fetch(`${backendUrl}/decrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" },                    body: JSON.stringify({ algorithm, data, key }),                });                const result = await response.json();                if (response.ok) {                    document.getElementById("output").innerText = `解密结果：${result.result}`;                } else {                    document.getElementById("output").innerText = `错误：${result.error}  提示：${result.result}`;                }            } catch (error) {                document.getElementById("output").innerText = "请求失败，请检查网络！";            }        }     </script></div></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cipher/default.html"/>
      <url>/cipher/default.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>选择框示例</title>    <style>select, button {        display: block;        color: rgb(34, 34, 34);        background: linear-gradient(142.99deg, rgba(217, 217, 217, 0.63) 15.53%, rgba(243, 243, 243, 0.63) 88.19%);        box-shadow: 0px 12px 24px -1px rgba(0, 0, 0,0.18);        border-color: rgba(7, 4, 14, 0);        border-radius: 50px;        /* block-size: 40px; */        height: 44px;        margin-bottom: .7rem;        /* margin: 7px auto;  */         /* padding: 18px 15px; */         outline: none;        text-align: center;        width: 100%;        max-width: 400px;        transition: 0.5s;        text-align: center;        font-size: 16px; /* 设置字体大小 */        font-family: Arial, sans-serif; /* 设置字体家族 */                    }       select:hover, button:hover {        background-color: #348016; /* 鼠标悬停时改变背景颜色 */      }            select:focus, button:focus {        outline: none; /* 移除默认的焦点轮廓 */        box-shadow: 0 0 10px #00a0f0; /* 获得焦点时添加阴影效果 */      }</style></head><body>    <select id="mySelect" onchange="displayContent()">        <option value="option1">古典密码</option>        <option value="option2">现代密码</option>    </select>     <div id="contentArea" style="display: none;">        <!-- 这里放置显示的内容 -->    </div>     <script>    function displayContent() {    const select = document.getElementById('mySelect');    const selectedOption = select.options[select.selectedIndex].value;    const contentArea = document.getElementById('contentArea');    // 根据选项值显示不同内容    switch (selectedOption) {        case 'option1':            // 为选项3创建一个下拉框            contentArea.innerHTML = `                <select id="algorithm">                    <option value="DES">DES</option>                    <option value="AES">AES</option>                    <option value="RSA">RSA</option>                    <option value="SM4">SM4</option>                </select>            `;            contentArea.style.display = 'block';            break;        case 'option2':            // 为选项2创建内容            contentArea.innerHTML = `             <select id="algorithm" for="">            <option value="加法密码">加法密码</option>            <option value="单表代替">单表代替</option>            <option value="仿射密码">仿射密码</option>            <option value="PlayFair">PlayFair</option>            <option value="Vigenere">Vigenere</option>            <option value="Hill">Hill</option></select>            `;            contentArea.style.display = 'block';            break;        default:            contentArea.style.display = 'none';    }}</script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cipher/script.js"/>
      <url>/cipher/script.js</url>
      
        <content type="html"><![CDATA[function displayContent() {    const select = document.getElementById('mySelect');    const selectedOption = select.options[select.selectedIndex].value;    const contentArea = document.getElementById('contentArea');     // 根据选项值显示不同内容    switch (selectedOption) {        case 'option1':            contentArea.innerHTML = 'nihao';            contentArea.style.display = 'block';            break;        case 'option2':            contentArea.innerHTML = '这是选项2的内容';            contentArea.style.display = 'block';            break;        case 'option3':            contentArea.innerHTML = '这是选项3的内容';            contentArea.style.display = 'block';            break;        default:            contentArea.style.display = 'none';    }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cipher/xialakuang.html"/>
      <url>/cipher/xialakuang.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>选择框示例</title>    <style>      .dropdown {  position: relative;  display: inline-block;}.dropdown-content {  display: none;  position: absolute;  background-color: #f9f9f9;  min-width: 160px;  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);  z-index: 1;}.dropdown-content a {  color: black;  padding: 12px 16px;  text-decoration: none;  display: block;}.dropdown:hover .dropdown-content {  display: block;}@keyframes float {  0% { transform: translateY(0); }  50% { transform: translateY(-10px); }  100% { transform: translateY(0); }}.dropdown-content {  animation: float 2s infinite;}.dropdown-content {  position: fixed;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);}    </style></head><body>    <div class="dropdown">        <button class="dropbtn">下拉菜单</button>        <div class="dropdown-content">          <a href="#">链接1</a>          <a href="#">链接2</a>          <a href="#">链接3</a>        </div>      </div></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cipher/index.html"/>
      <url>/cipher/index.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!DOCTYPE html><html lang="zh-CN"><head>    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>密码学</title>    <style>body, html {            /* height: 100%; */            display: flex;            margin: 0 auto;        }.main {            width: 100%;            max-width: 600px; /* 限制最大宽度 */             padding: 20px;            box-sizing: border-box;            margin-left: 180px;}h1 {                margin-left: 150px;/* 水平居中h1文字 */            color: #3e7ca5; /* 设置h1文字的颜色 */            font-family: cursive, sans-serif;        }h1:hover{    color: #05060f;}.input {      width: 100%;  margin-bottom: .5rem;   max-width: 400px;  height: 44px;  background-color: #05060f0a;  border-radius: .5rem;  padding: 0 1rem;  border: 2px solid transparent;  font-size: 1rem;  transition: border-color .3s cubic-bezier(.25,.01,.25,1) 0s, color .3s cubic-bezier(.25,.01,.25,1) 0s,background .2s cubic-bezier(.25,.01,.25,1) 0s;}.label {  display: block;      font-size: 1.2rem;  font-weight: bold;  font-family: cursive, sans-serif;  color: #05060f99;  transition: color .3s cubic-bezier(.25,.01,.25,1) 0s;}.label:hover{    color: #6eeb0e99;    }.input:hover, .input:focus, .input-group:hover .input {  outline: none;  display: flex;  align-items: center;  margin-bottom: 1rem;  border-color: #05060f;}#mySelect,h2{    float: left;    margin-top: 10px;    margin-bottom: 5px; /* 添加一些上边距 */    max-width: 180px;    width: 100%;  }h2{    display: inline-block;    font-family: cursive, sans-serif;    width: 50px;}#algorithm {    float: left;}select{margin-bottom: 10px;        margin-top: 10px;        max-width: 180px;        width: 100%;        height: 44px;                outline: 0;        background: #bde9cf;        color: #5f84ce;        border: 1px solid crimson;        border-radius: 9px;                padding: 4px;                font-size: 16px;        font-family: cursive, sans-serif;        font-weight:bolder;        text-align: center;        transition: 0.5s;    } button {  display: inline-block;  color: rgb(34, 34, 34);  background: linear-gradient(142.99deg, rgba(217, 217, 217, 0.63) 15.53%, rgba(243, 243, 243, 0.63) 88.19%);  box-shadow: 0px 12px 24px -1px rgba(0, 0, 0,0.18);  border-color: rgba(7, 4, 14, 0);  border-radius: 50px;  /* block-size: 40px; */  height: 44px;  margin-top: 10px;  margin-bottom: .7rem;  /* margin: 7px auto;  */   /* padding: 18px 15px; */   outline: none;  text-align: center;  font-family: cursive, sans-serif;  font-weight: bolder;  width: 100%;  max-width: 200px;  transition: 0.5s;  text-align: center;  font-size: 16px; /* 设置字体大小 */          } select:hover {  background-color: #b1f197; /* 鼠标悬停时改变背景颜色 */}button:hover{    background-color: #26acf4;} button:focus {  outline: none; /* 移除默认的焦点轮廓 */  box-shadow: 0 0 10px #3e474b; /* 获得焦点时添加阴影效果 */}        /* button {            background-color: #a1c5ec;            color: rgb(229, 139, 139);            border: none;            cursor: pointer;        } */.result {            margin-top: 20px;            font-weight: bold;            font-size: 1.2rem;            font-weight: bold;            color: #05060f99;                    }.video {      position: fixed;      top: 0;      left: 0;      width: 100%;      height: 100%;      z-index: -1000;      object-fit: cover;         }    </style></head><body>    <div class="main">    <h1>密码学</h1>    <video class="video" src="man.mp4" loop="loop" controls="controls" autoplay="autoplay" muted></video>    <label class="label" for="algorithm">选择加解密算法：</label>    <select id="mySelect" onchange="displayContent()">        <option value="select">Select a cipher</option>        <option value="option1">古典密码</option>        <option value="option2">现代密码</option>    </select>    <h2>  -->></h2>    <div id="contentArea" style="display: none;">    <!-- 这里放置显示的内容 --></div>    <div style="clear: both;"></div><div id="keysContainer" style="display: none;"></div>      <!-- <label for="inputData">输入数据：</label>    <!-- <input id="inputData" type="text" placeholder="在此输入需要加解密的数据"> -->    <!-- <input placeholder="输入需要加解密的数据" class="input" name="text" type="text"> --><!--     <label for="inputKey">输入密钥：</label>    <input id="inputKey" type="text" placeholder="在此输入密钥"> -->    <!-- <input placeholder="输入密钥" class="input" name="text" type="text">    -->    <button onclick="encryptData()">加密</button>    <button onclick="decryptData()">解密</button>     <div class="result">        <p>结果：</p>        <p id="output"></p>    </div>    <script>        //        const backendUrl = "https://flask-backend-cwc0.onrender.com/"; // 线上服务的 URL 地址）        const backendUrl = "http://127.0.0.1:5000"; // 后端服务的 URL（本地开发地址）                        //下拉框设置        function displayContent() {            const select = document.getElementById('mySelect');            const selectedOption = select.options[select.selectedIndex].value;            const contentArea = document.getElementById('contentArea');            const keysContainer = document.getElementById('keysContainer');            // 清空之前的密钥输入框            keysContainer.innerHTML = '';            keysContainer.style.display = 'none';            // contentArea.innerHTML = '';            // contentArea.style.display = 'none';            switch (selectedOption) {                case 'option1':                    // 古典密码的内容                    contentArea.innerHTML = `                        <select id="algorithm" >                            <option value="select">Select a classical_algorithm</option>                            <option value="加法密码">加法密码</option>                            <option value="单表代替">单表代替</option>                            <option value="仿射密码">仿射密码</option>                            <option value="PlayFair">PlayFair</option>                            <option value="Vigenere">Vigenere</option>                            <option value="Hill">Hill</option>                        </select>                    `;                    contentArea.style.display = 'block';                    break;                case 'option2':                    // 现代密码的内容                    contentArea.innerHTML = `                        <select id="algorithm">                            <option value="select">Select a modern_algorithm</option>                            <option value="DES">DES</option>                            <option value="AES">AES</option>                            <option value="RSA">RSA</option>                            <option value="SM4">SM4</option>                        </select>                    `;                    contentArea.style.display = 'block';                    break;            }            // 获取算法选择器            const algorithmSelect = document.getElementById('algorithm');            // 监听算法选择变化            algorithmSelect.addEventListener('change', function() {                const selectedAlgorithm = algorithmSelect.value;                if (selectedAlgorithm === 'RSA' || selectedAlgorithm ==='仿射密码') {                    // 如果选择的是RSA，添加两个密钥输入框                    keysContainer.innerHTML = `                    <div class="input-group" >                    <label class="label" for="inputData">输入数据：</label>                    <input placeholder="输入需要加解密的数据" autocomplete="off" id="inputData" class="input"  name="text" type="text"></div>                    <label for="publicKey" class="label">密钥1</label>                    <input type="text" id="publicKey" class="input" placeholder="输入密钥1" autocomplete="off" type="text">                    <label for="privateKey" class="label">密钥2</label>                    <input type="text" id="privateKey"  class="input" placeholder="输入密钥2" autocomplete="off" type="text">                    `;                    keysContainer.style.display = 'block';}                else {                    keysContainer.innerHTML = `                        <div class="input-group" >                        <label class="label" for="inputData">输入数据：</label>                        <input placeholder="输入需要加解密的数据" autocomplete="off" id="inputData" class="input"  name="text" type="text">    </div>                        <div class="input-group">                        <label class="label" for="inputKey">输入密钥：</label>                        <input placeholder="输入密钥" autocomplete="off" id="inputKey" class="input"  name="text" type="text"></div>`                    keysContainer.style.display = 'block';                   }                            }  );        }        // 加密函数参数设置        async function encryptData() {            const algorithm = document.getElementById("algorithm").value; // 获取算法选择            const data = document.getElementById("inputData").value; // 获取用户输入的数据            let key1,key2;            if (algorithm === 'RSA' || algorithm ==='仿射密码') {                 key1 = parseInt(document.getElementById("publicKey").value,10); // 获取公钥                 key2 = parseInt(document.getElementById("privateKey").value,10); // 获取私钥                }             else if(algorithm === '加法密码') {                 key1 = parseInt(document.getElementById("inputKey").value,10);            }            else {                key1 = document.getElementById("inputKey").value; // 获取其他算法的单个密钥            }                                                            try {                // 向后端发送 POST 请求                const response = await fetch(`${backendUrl}/encrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" }, // 请求头，表示数据类型为 JSON                    body: JSON.stringify({ algorithm, data, key1,key2}), // 请求体，发送的数据                });                const result = await response.json(); // 接收后端返回的响应                if (response.ok) {                    // 将加密结果显示在页面上                    document.getElementById("output").innerText = `加密结果：${result.result}`;                } else {                    document.getElementById("output").innerText = `错误：${result.error}  提示：${result.result}`;                }            } catch (error) {                document.getElementById("output").innerText = "请求失败，请检查网络！";            }        }        // 解密函数设置        async function decryptData() {            const algorithm = document.getElementById("algorithm").value;            const data = document.getElementById("inputData").value;            // const key = document.getElementById("inputKey").value;            let key1,key2;            if (algorithm === 'RSA' || algorithm ==='仿射密码') {                 key1 = parseInt(document.getElementById("publicKey").value,10); // 获取公钥                 key2 = parseInt(document.getElementById("privateKey").value,10); // 获取私钥                }             else if (algorithm === '加法密码') {                key1 = parseInt(document.getElementById("inputKey").value,10);            }            else {                 key1 = document.getElementById("inputKey").value; // 获取其他算法的单个密钥            }            try {                const response = await fetch(`${backendUrl}/decrypt`, {                    method: "POST",                    headers: { "Content-Type": "application/json" },                    body: JSON.stringify({ algorithm, data, key1,key2}),                });                const result = await response.json();                if (response.ok) {                    document.getElementById("output").innerText = `解密结果：${result.result}`;                } else {                    document.getElementById("output").innerText = `错误：${result.error}  提示：${result.result}`;                }            } catch (error) {                document.getElementById("output").innerText = "请求失败，请检查网络！";            }        }            </script></div></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
  
</search>
